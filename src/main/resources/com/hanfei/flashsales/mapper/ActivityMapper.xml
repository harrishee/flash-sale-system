<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.hanfei.flashsales.mapper.ActivityMapper">

    <sql id="base">
        activity_id, activity_name, commodity_id, total_stock, available_stock, lock_stock, activity_status, old_price, sale_price, start_time, end_time
    </sql>

    <insert id="insertActivity">
        insert into fs_activity (activity_name, commodity_id, total_stock, available_stock, lock_stock,
                                 activity_status, old_price, sale_price, start_time, end_time)
        values (#{activityName}, #{commodityId}, #{totalStock}, #{availableStock}, #{lockStock}, #{activityStatus},
                #{oldPrice}, #{seckillPrice}, #{startTime}, #{endTime})
    </insert>

    <select id="selectActivityById" resultType="com.hanfei.flashsales.pojo.Activity">
        select
        <include refid="base"/>
        from fs_activity
        where activity_id = #{activityId}
    </select>

    <select id="selectActivitiesByStatus" resultType="com.hanfei.flashsales.pojo.Activity">
        select
        <include refid="base"/>
        from fs_activity
        where activity_status = #{activityStatus}
    </select>

    <select id="selectActivityVOsByStatus" resultType="com.hanfei.flashsales.vo.ListVO">
        select a.activity_id      as activityId,
               a.activity_name    as activityName,
               a.commodity_id     as commodityId,
               a.total_stock      as totalStock,
               a.available_stock  as availableStock,
               a.lock_stock       as lockStock,
               a.activity_status  as activityStatus,
               a.old_price        as oldPrice,
               a.sale_price       as seckillPrice,
               a.start_time       as startTime,
               a.end_time         as endTime,
               c.commodity_name   as commodityName,
               c.commodity_img    as commodityImg,
               c.commodity_detail as commodityDetail
        from fs_activity a
                 left join fs_commodity c on c.commodity_id = a.commodity_id
        where activity_status = #{activityStatus}
    </select>

    <update id="updateActivity">
        update fs_activity
        set activity_name   = #{activityName},
            commodity_id    = #{commodityId},
            total_stock     = #{totalStock},
            available_stock = #{availableStock},
            lock_stock      = #{lockStock},
            activity_status = #{activityStatus},
            old_price       = #{oldPrice},
            sale_price      = #{salePrice},
            start_time      = #{startTime},
            end_time        = #{endTime}
        where activity_id = #{activityId}
    </update>

    <!-- 锁定库存，将可用库存减1，锁定库存加1 -->
    <!--简单的乐观锁：available_stock > 0，简单解决超卖现象-->
    <update id="lockStockById">
        update fs_activity
        set lock_stock      = lock_stock + 1,
            available_stock = available_stock - 1
        where activity_id = #{activityId}
          and available_stock > 0
    </update>

    <!-- 减少锁定库存，将锁定库存减1 -->
    <update id="deductStockById">
        update fs_activity
        set lock_stock = lock_stock - 1
        where activity_id = #{activityId}
    </update>

    <!-- 回滚库存，将可用库存加1，锁定库存减1 -->
    <update id="revertStockById">
        update fs_activity
        set available_stock = available_stock + 1,
            lock_stock      = lock_stock - 1
        where activity_id = #{activityId}
    </update>

    <update id="lockStockOptimisticLock">
        update fs_activity
        set lock_stock      = lock_stock + 1,
            available_stock = available_stock - 1
        where activity_id = #{activityId}
          and available_stock > 0
    </update>
</mapper>
